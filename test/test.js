import fs from 'fs';
import { expect } from 'chai';

describe('Files generated by Target host', function () {
    // validate if data received on the Target hosts are correct
    // checking if each lines in input file has been correctly propagated in events_logs
    it('Validates data received on Target hosts', function () {
        const originalData = fs.readFileSync('./agent/inputs/large_1M_events.log', 'utf-8');
        const target1Data = fs.readFileSync('events-target_1.log', 'utf-8');
        const target2Data = fs.readFileSync('events-target_2.log', 'utf-8');

        const combinedData = target1Data + target2Data

        // Split the contents of originalData and combinedData into arrays of lines
        const originalLines = originalData.split('\n').filter(line => line.trim() !== '');
        const combinedLines = combinedData.split('\n').filter(line => line.trim() !== '');

        // Check if every line in originalData is present in combinedData
        const allLinesInOriginalExistInCombined = originalLines.every(line => combinedLines.includes(line));

        expect(allLinesInOriginalExistInCombined).to.equal(true);
    });

    it('Validates files generated by Target hosts are not empty', function() {
        const target1Data = fs.readFileSync('events-target_1.log', 'utf-8');
        const target2Data = fs.readFileSync('events-target_2.log', 'utf-8');
    
        // Check if the length of data in each file is greater than 0
        expect(target1Data.length).to.be.above(0);
        expect(target2Data.length).to.be.above(0);
    });

    it('Validates uniformity of data distribution between Target hosts', function() {
        // check if data has been distributed almost evenly between the two targets
        const target1Data = fs.readFileSync('events-target_1.log', 'utf-8');
        const target2Data = fs.readFileSync('events-target_2.log', 'utf-8');
        
        const target1DataLength = target1Data.length;
        const target2DataLength = target2Data.length;
        const totalDataLength = target1DataLength + target2DataLength;
    
        // Calculate percentage difference between data lengths
        const percentageDifference = Math.abs((target1DataLength - target2DataLength) / totalDataLength) * 100;
    
        // Allow up to 50% difference in data length
        expect(percentageDifference).to.be.at.most(50);
    });

    it('Validates completeness of data on Target nodes', function() {
        // check if all the data has been sent to the 2 target hosts
        const originalData = fs.readFileSync('./agent/inputs/large_1M_events.log', 'utf-8');
        const target1Data = fs.readFileSync('events-target_1.log', 'utf-8');
        const target2Data = fs.readFileSync('events-target_2.log', 'utf-8');
    
        // Combine data received on both target nodes
        const combinedData = target1Data + target2Data;
    
        // Validate if combined data is equal to the original data
        expect(combinedData).to.have.lengthOf(originalData.length);
    });

});