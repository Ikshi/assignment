{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 3,
    "pending": 0,
    "failures": 1,
    "start": "2024-05-15T18:48:30.749Z",
    "end": "2024-05-15T18:48:31.001Z",
    "duration": 252,
    "testsRegistered": 4,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5e393e35-54c9-4372-b34f-903a360053ba",
      "title": "",
      "fullFile": "/Users/ikshitamadhub/Documents/ikshitaProjects/assignment/test/test.js",
      "file": "/test/test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "83532880-b371-472e-84b6-3d3f400f592b",
          "title": "Files generated by Target host",
          "fullFile": "/Users/ikshitamadhub/Documents/ikshitaProjects/assignment/test/test.js",
          "file": "/test/test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validates data received on Target hosts",
              "fullTitle": "Files generated by Target host Validates data received on Target hosts",
              "timedOut": false,
              "duration": 189,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const originalData = fs.readFileSync('./agent/inputs/large_1M_events.log', 'utf-8');\nconst target1Data = fs.readFileSync('events-target_1.log', 'utf-8');\nconst target2Data = fs.readFileSync('events-target_2.log', 'utf-8');\nconst combinedData = target1Data + target2Data\n// Split the contents of originalData and combinedData into arrays of lines\nconst originalLines = originalData.split('\\n').filter(line => line.trim() !== '');\nconst combinedLines = combinedData.split('\\n').filter(line => line.trim() !== '');\n// Check if every line in originalData is present in combinedData\nconst allLinesInOriginalExistInCombined = originalLines.every(line => combinedLines.includes(line));\nexpect(allLinesInOriginalExistInCombined).to.equal(true);",
              "err": {
                "message": "AssertionError: expected false to equal true",
                "estack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///Users/ikshitamadhub/Documents/ikshitaProjects/assignment/test/test.js:21:54)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "06b524f8-0232-4e26-9c18-d760e980592f",
              "parentUUID": "83532880-b371-472e-84b6-3d3f400f592b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validates files generated by Target hosts are not empty",
              "fullTitle": "Files generated by Target host Validates files generated by Target hosts are not empty",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const target1Data = fs.readFileSync('events-target_1.log', 'utf-8');\nconst target2Data = fs.readFileSync('events-target_2.log', 'utf-8');\n    \n// Check if the length of data in each file is greater than 0\nexpect(target1Data.length).to.be.above(0);\nexpect(target2Data.length).to.be.above(0);",
              "err": {},
              "uuid": "272d7952-2560-45b3-98fd-016e49fa5e46",
              "parentUUID": "83532880-b371-472e-84b6-3d3f400f592b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validates uniformity of data distribution between Target hosts",
              "fullTitle": "Files generated by Target host Validates uniformity of data distribution between Target hosts",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// check if data has been distributed almost evenly between the two targets\nconst target1Data = fs.readFileSync('events-target_1.log', 'utf-8');\nconst target2Data = fs.readFileSync('events-target_2.log', 'utf-8');\n\nconst target1DataLength = target1Data.length;\nconst target2DataLength = target2Data.length;\nconst totalDataLength = target1DataLength + target2DataLength;\n    \n// Calculate percentage difference between data lengths\nconst percentageDifference = Math.abs((target1DataLength - target2DataLength) / totalDataLength) * 100;\n    \n// Allow up to 50% difference in data length\nexpect(percentageDifference).to.be.at.most(50);",
              "err": {},
              "uuid": "7ddd9129-042f-4dd3-b41a-35c84851c713",
              "parentUUID": "83532880-b371-472e-84b6-3d3f400f592b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validates completeness of data on Target nodes",
              "fullTitle": "Files generated by Target host Validates completeness of data on Target nodes",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// check if all the data has been sent to the 2 target hosts\nconst originalData = fs.readFileSync('./agent/inputs/large_1M_events.log', 'utf-8');\nconst target1Data = fs.readFileSync('events-target_1.log', 'utf-8');\nconst target2Data = fs.readFileSync('events-target_2.log', 'utf-8');\n    \n// Combine data received on both target nodes\nconst combinedData = target1Data + target2Data;\n    \n// Validate if combined data is equal to the original data\nexpect(combinedData).to.have.lengthOf(originalData.length);",
              "err": {},
              "uuid": "8428043a-5618-4eb4-a846-9745195c51e7",
              "parentUUID": "83532880-b371-472e-84b6-3d3f400f592b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "272d7952-2560-45b3-98fd-016e49fa5e46",
            "7ddd9129-042f-4dd3-b41a-35c84851c713",
            "8428043a-5618-4eb4-a846-9745195c51e7"
          ],
          "failures": [
            "06b524f8-0232-4e26-9c18-d760e980592f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 248,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}